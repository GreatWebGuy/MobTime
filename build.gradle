plugins {
    id 'java'
    id 'application'
    id 'org.openjfx.javafxplugin'        version '0.0.8'
    id 'org.beryx.jlink'                 version '2.17.4'
}

mainClassName = 'com.greatwebguy.application.MobTime'

repositories {
    mavenCentral()
    jcenter()
}

dependencies {
    implementation ('org.kordamp.ikonli:ikonli-core:11.3.5')
    implementation ('org.kordamp.ikonli:ikonli-javafx:11.3.5')
    implementation ('org.kordamp.ikonli:ikonli-fontawesome-pack:11.3.5')
}

sourceCompatibility = JavaVersion.VERSION_15
targetCompatibility = JavaVersion.VERSION_15

javafx {
    version = '15.0.1'
    modules = [ 'javafx.controls', 'javafx.fxml', 'javafx.graphics', 'javafx.media' ]
}


jlink {
    options = ['--strip-debug', '--compress', '2', '--no-header-files', '--no-man-pages']
    launcher {
        name = 'MobTime'
    }
    jpackage {
        installerOptions = [
            '--description', 'Mob Timer for Mob Programming',
            '--copyright', 'Copyright 2020 GreatWebGuy',
            '--app-version', '1.7.6'
        ]
        installerType = project.findProperty('installerType') // we will pass this from the command line (example: -PinstallerType=msi)
        if (installerType == 'msi') {
            imageOptions += ['--icon', 'src/main/deploy/package/windows/MobTime.ico']
            installerOptions += [
                '--win-per-user-install', '--win-dir-chooser',
                '--win-menu', '--win-shortcut'
            ]
        }
        if (installerType == 'pkg') {
            imageOptions += ['--icon', 'src/main/deploy/package/macosx/MobTime.icns']
        }
        if (installerType in ['deb', 'rpm']) {
            imageOptions += ['--icon', 'src/main/deploy/package/default/icon_256x256.png']
            installerOptions += [
                '--linux-menu-group', 'Office',
                '--linux-shortcut'
            ]
        }
        if (installerType == 'deb') {
            installerOptions += [
                '--linux-deb-maintainer', 'webguy@greatwebguy.com'
            ]
        }
        if (installerType == 'rpm') {
            installerOptions += [
                '--linux-rpm-license-type', 'GPLv3'
            ]
        }
    }
}

jpackage {
    doFirst {
        project.getProperty('installerType') // throws exception if its missing
    }
}
